"""
load_data.py - Module to load data from JSON file to DB
-------------------------------------------------
This module handles the process of creating a PostgreSQL table,
loading applicant data from a JSON file, cleaning and normalizing
the data, and inserting it into the database using a connection pool.
Features:
- lib.database_utils: Custom database utility class (with connection pooling using psycopg)
- json: For reading and parsing JSON data
- os: To construct file paths
- re: For regex-based string cleaning

Dependencies: 
- lib.database_utils: Contains database connection and query execution utilities.

Usage:
    $ python load_data.py      # saves the data from /module_2/applicant_data.json file to PostgreSQL
"""

from lib.database_utils import DatabaseUtils
import json
import os, re

# Drops the 'Applicants' table if it exists and creates a new one.
def create_applicants_table(db):
    db.drop_table("Applicants")
    db.create_table("""
        CREATE TABLE Applicants(
            p_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            program TEXT,
            comments TEXT,
            date_added date,
            url TEXT,
            status TEXT,
            term TEXT,
            us_or_international TEXT,
            gpa float,
            gre float,
            gre_v float,
            gre_aw float,
            degree TEXT);
   """)

# Loas JSON data from specific file path and return the list or empty
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"Data saved to {filename}. {f.name}")
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
    except json.JSONDecodeError:
        print(f"Error: File '{filename}' contains invalid JSON.")
    except Exception as e:
        print(f"Unexpected error reading JSON file: {e}")
    return data

#Inserts a list of applicants to the database PostgreSQL
def insert_applicants(applicants):
    float_fields = {"gpa", "gre", "gre_v", "gre_aw"}
    for applicant in applicants:
        cleaned_applicant = {}
        for k, v in dict(applicant).items():
            # Rename 'nationality' to 'us_or_international'
            key = "us_or_international" if k == "nationality" else k

            # Attempt to convert float fields
            if key in float_fields:
                try:
                    match = re.search(r"\d+(\.\d+)?", v)
                    v = match.group(0) if match else None
                    cleaned_applicant[key] = float(v)
                except (ValueError, TypeError):
                    cleaned_applicant[key] = None  # or 0.0, depending on your needs
            else:
                # Convert None to empty string for other fields
                cleaned_applicant[key] = v if v is not None else ""

        columns = cleaned_applicant.keys()
        values = tuple(cleaned_applicant.values())
        query = "INSERT INTO Applicants ({}) VALUES ({});".format(", ".join(columns), ", ".join(["%s"] * len(values)))
        db.execute_query(query, values)

if __name__ == "__main__":
    # Database connection info (local PostgreSQL)
    conninfo = "postgresql:///grandcafedatabase"
    # Initialize the database utility with a connection pool
    db = DatabaseUtils(conninfo, 5, 10)
    # Load applicant data from a JSON file
    path = f"{os.getcwd()}/module_2/applicant_data.json"
    data = load_data(path)
    # Recreate the applicants table and insert data
    create_applicants_table(db)
    insert_applicants(data)